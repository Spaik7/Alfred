node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 29
        }
        dim {
          size: 13
        }
      }
    }
  }
}
node {
  name: "sequential/net/while/loop_counter"
  op: "Const"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
      }
    }
  }
}
node {
  name: "sequential/net/while/maximum_iterations"
  op: "Const"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequential/net/gru_cell/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 60
          }
        }
        tensor_content: "\222\267\211<WE\367\273\240~P=\226\347\263;P9\021\275\003\237\224:\255~\004\274\275\362\225\274il\360\273@\037\315\270Y\021\t=\236\357\021\275\351\261\354<\340\244I\275\322\352]\275\237\201L\274\321qh\275u\243V=IP\374<\247|%=s9\027\274\213\277o=\240u\200=\256\265\023;\nw\220<)\237\367;D\035}\274[\315\021=9\311g=\014\364\305<\326\300\237\274\252\267K=\317\004\266\274fDz\273\340\360c<\346\233J:\350\342\t=G\2151<\236eG\274\355\"U=\212\002\214\274\257\n\010=\3542\271<\0108\213\274\305 \266<\253+[\274d?D\275\211P\001=v,\335<F\004\013=6\230\202<\230\222E=\346fU\273?0\000\275\242Q\004=\314\347\235<LF\347<\205\360\017=\252\026\205\274\357\032\351\274\222\267\211<WE\367\273\240~P=\226\347\263;P9\021\275\003\237\224:\255~\004\274\275\362\225\274il\360\273@\037\315\270Y\021\t=\236\357\021\275\351\261\354<\340\244I\275\322\352]\275\237\201L\274\321qh\275u\243V=IP\374<\247|%=s9\027\274\213\277o=\240u\200=\256\265\023;\nw\220<)\237\367;D\035}\274[\315\021=9\311g=\014\364\305<\326\300\237\274\252\267K=\317\004\266\274fDz\273\340\360c<\346\233J:\350\342\t=G\2151<\236eG\274\355\"U=\336\177\034\274\310\337\026=\212\302\024=\272+\014;m\355>=0\243B\274\td\037\275\333mL=\014t\355<\272\237\032=\032\037\000<\212\3326=\360UV\274\036\203\035\275\223v%=oq\277<\010\321\375\274R\\!=\306/\221\274\035\332\033\275"
      }
    }
  }
}
node {
  name: "sequential/net/time"
  op: "Const"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
      }
    }
  }
}
node {
  name: "sequential/net/TensorArrayV2_1/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "sequential/net/TensorArrayV2_1/num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequential/net/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "sequential/net/TensorArrayUnstack/TensorListFromTensor/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\r\000\000\000"
      }
    }
  }
}
node {
  name: "sequential/net/gru_cell/MatMul_1/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 60
          }
        }
        tensor_content: "\333$\314\275\241\210\311<\032\177\030>\314\233\240<\202\335\377=^kT\275\344v\230\274\221<\033\276[\177H=y6k\275\253\000\246=\007\350@>\214z};\220\017\232=\237?\204=U\270\016\275\344\231\004>x]\321<\327\203\006>\312t\360<k&\257>OH\213=\361}\347\273S\264\253=\326\027\310\275p7\032\275\200\377\232<\005q\323<\004\002\354=\202v\204<@b2\276x\037\212\276G\303q\275\260;t=iN\037\275L\240\215=\360\316\223>0\n\235\275\361\0318\275\256\037\000>\206y{>w2A\276\030\317K\276\030N)\274+\226\260=\006$\315;_1F>\360\005\203\275,\353I\276\370d\327\274v\006x\276B\227:\275{\267\257\275\331U%\275 \016\362=\306\037\264=\225\322\301\276+\340 >\033(;\276*}G=c\004\306\275\177\036]=\007\357\245>\016R\267<\323p*>@\226\350=\241\025\201\274\245\360\217=\313\247\347\275\266\010\000\2761\nP>\266\303\303\275\303\357\021\275k\274\214\276\361?4>x\006\324;I\333^\275j./=\247\017\025>CFC>\365\374\327\275{\332&>r&\226\275e\317\316\275\230\200\327\275\375\272\023>\221\r\250=T\'\201=\245T\037>\023\003\272=|\201[=\210\273\017>\325NW\275\222\245\203>^E\021\275\303\267\351\275k\004&\276\277\001\220>\323\232\202=Zu]\275:I,\275%y\003>\263\272\000=\226!]\276\226)%>\335U\274\2724\024\376\274\230\261\334=zc\r\276y\242+>\225\247\360\274\315\034\036=\377\334P>\266\366G>T\365\307\275c\201]>Q\305-\276\300\3514>\001a#=\351\235\310<\374\236\236\273\245\317%>\235\216\r\275cc\237\275<\257\320;\364\200\032\276\237.f>\354DW\275u\330\210>\252h\334\275n\253\037>Q\260=\276\305\360\243=bq\023>\027\211\374\275\263\215\250\276\027\210p\276\262N\032=\267\214\210\275f\201\247\275\235X\370\275\244\233\200=T\241a\276\305\016\267\275A\007c=\3010\335<F\236\016\276^@\003\276~\177>\275\035\222=>$\036\030\275FS\323\275mX\353\274\302\3419=\322\326V=\361\244\013>[\023\224\275\026pk;/\375\206>\201\306\264\275\325/\345\275\331\333\250\273FA\026\275\032\034w\276\010\360\202\275\372\0142>\022\257\212\2742\213\034>\0230D\276\366s!=\031<C\274p\260\210>3\233\010\275\003\265\370<\225\023\244=\'W\267=\331B\271=\322\343\227\275\251\326k\274>\340w\276\273\235\001>\325C\273\275>\374R>a\024.\275\021\311\262=\217\211\315<\347D\364=/\000\271\275\231\345c\276\n\376\224\275\260\357\362<\215\224s\275\214\212\246<M\001\315=\242V\014>\223?\246\274\007\254g\273\272\212{=.\313\374;\022\217.\274\333\331\227=D\316\023\276\023@\276=\262\202\377=\0044K<\267\255:\276\'A&\276&\217\345=\262\006\225>\351\326\026\276h\267b\275\274C\312=\2435\304=w\014S\274\345\007\341=\256rz\276\246o\241=\010\275\360\275|yy>\031<\363\275R>\227\275\0017Y=L\215;=\022\n\021<\246/S\276#\360\224=d\251\336=\026\353O\276Q\334}=v\216\006\275,\013`\274F/\002\276(\235\000\275\267R\003\276\003\2452>9\236\202=\037\223\353\275\333SM\276\234t#>4\344\306\276\324\236\346\275V\311Q>\177\022\001\276S\223\371=\002]m\275\310\271;\274b\333\247\2759#K\275\262\217v\276\202\032\003:\315\333=>6\247\325<e\021\307\274\212\326\230\275TZ\312\275z\030\3659a\350\277\275\210WB\276\004~\372<\274L\204\275\346|i=\201\222\315;dq\352=\370\367\r=t%>\274\211\3700>a\3166>C\311r=u\257B>\266\365\254=\305,\244\275IbO\276\244\212\214\2719\030;\276\375\264\337=kx\037<M\220\026\276\351\340\037=\371\261\206\2744\304>\276\343t\024=\320&\021\276\335\246\223=\260\270z\276\247\005\313\275\345\204l<\326\234\013\276\253\267\360>B\261\305>\202\327(\275\377\332\331<\016/e\275)3\203\275\237\354\204>\033G\371=BP,\276f\335\205\275\270\232\333=\230\205\326;_\021\030\276\n\316(=\204\363u\275\312\356\035=U3\306<\014\023G>B\342\255\275\305:\024=\035\273\273\275\200-\307>\275x\321\274=\301\020>@\377\000>)?\237\275\360\213v\276\365|C=O ?=m6\257\275T.S\276qb\037>08\000\276x^\221\275\n\270\350\275\302MH=J\317%\2759\274\230\275g\326\016>\001\"\177=:L\330=\200\241\210\274\320\310\311\275\317\360)>\274g\221\273\304\315\\>\215\302\235=7\013\340\274\212\341g<\314\277\250=\3230S\276\216c\036<\020\363\200\275\352),>O\214\031\275\013\233I\275\357\202\003=\347\302*<j\2003>\235\305\332>\301&B<\342|\261;\267{P\276\262\021\265=\355\313\225\276\3640 \276W+\247\274J?\231=\276\312C>\257\361\026>\201/\265\275\333\253\361=\320\367=>\266\017\n\276J]G\275\237\212\251=\232\236\230\276\361\360&=s[\360=N\247\317<\337Q\215=\\\027\260= \037\213\275B\306j\276\335\266\237\275R\354\005\276\030\370\300\275\214\270`\275t\363\307=\220\251\255\273{\"q\275\276j\035\276]\253D=\254\352\214=!\215\370=\237B\250<\004\037\205>n\255\247\275\377\255\230\275\264\351V=\222\013\031>\370\367;\276h%\232\275*\310\206\276E\020\262\274~\017\300=\216,,\275\3602\212\276Z\200\242=\243\321\331\275\306^\224=\355\275\022=\204\320Y\276==\342=k\312\315\276p\207\036\276\2212\231\275\007\266S\276\267&\027\275\267\351[=}\275\207\275(\024\245\276\246u\215\276m\244\205\275\377\331\220\276(\326\n\271\224\306\303=\364c\'\276p[m<\265\324\365=\270\220A\273\277\374\217>zI(=a#\244=\340\351W\276\017~\243=$\377\333\275\326\226\215=4\017-\275\267\224\376=\303W!\276\241\303\312\275\007\347\200\274;[\210\274\003\3041\276\263\335\032\275\310Z\361=\237\257\217\276`,\016>\350H\333\275\244\005\203=\007\370\013=\233\"\300=&+Y>V\235\355<c\232q\275\023\021{\275\320\307)<\350\300\242>O\242\n>\"\0030\276\374\200\210\273\'\272\001\276\244\252\013<7\251\013>Gm\227\275Z\351W>B\037\007\2754\263~>\224\236N\275\325\307(\276[0H=\345\336_\276\036\033\313<}\342Q=\377\302\200=\2450\215=\304j\000=#\374\337=\027\246#\276P>\216=O\316\022>&\274\005=\005\333 \276\271}\227\275ga\250\275V]j\276!l\263\274\231\363\233=\377\276A<\203\212s>\362E\214\273\2216m=\332\336\020\276f\243\347\274Ap\210>\231^X\274\252#P\276\0107\260\275M/\">\335\026u\276\031\017\007>bu\333\274i\315=\276z,5>\310\240\367\274\340\023\023\276\244w\035=T\200\243=\037\177\344\275v\\\232\274v\362I\275qF\013=}w\315\274p\335\"\275\317\246\035>\340\320\t>\327\366l>\302\354\014\276\211\322\204\275\326OS\274Mz\254=[\020\013<\367\363[\274\360M\006\274\023\017d\275\177w\221=9GG>\210\216\220>\347\322\250\275\255\327:>RG\007\275\240XX\275`\243[\276\201\312F>\030\020L=\377\034\204>\2347C>nJ\362=\2756\000>\306w\252>\327\022I=\325P\010=\313\032+=RW\035<Hw\010>1\340\235\2756\364\274=V\274(\276\254\233}\276\211\214\017=\320\210a=>U<\275\247\200\'\275K\0234\275\374\370\200\275\267\366\263\275\241\277\357\275Z7h\275\237\353\236<\371\253\t>\377\267~\274\222\000\223=\242)y>\3626l=\004\336j\276u`><\363\365A>:{\210;\3355\322\2750M\270\274u\263\370=\330q\001>\010\252\362<u\316\025>\343\263\362=*\245N=\030n\002>-\230\014=\220\0173\276?\030Z>\305z\323\275\236k\032=\373G\024\275\365\035l\274\277\017e=o\365\030=%\326\373=\241\327P>\270O\032<<\265\202>:\371u>\375\373\n\276\026.\033>\324\026\330=\037:C>\027\243\030>:+\023\276\342\327\203\2760\203Y\275\031A\001>Y\334\232>\241\250@>\276\367\014\276%\021~>:D\232\273\246\007!\275\266\307f<\236\346g>\261\356/>X8J=\342m*\276D\223\262\275dT\304\276\255^\310=\375\004\016=\261\334U\275\032$:<{\2333\276\252\027O<\351\330\245=\303\275x\276\356\262\270=\212G\003\276\035\030C\275\237\235]\275\314\005\007>\324\211\033\276w\034\330=\262\366\367=7\230\200\275A\313->^\347\220\276\306\027\225\275\304\265>\274\233\332X\2760\231\024=\333\323\033\274\307c\233\275\321\244\203=\027\231\360=\362\371\300\275\265\205\025\276mBl=\201\224\322=Y\002\'>\n6\214\275\026\204\207\275\255\215\214<\313MH\276\330rJ\276\351\2360><\251\032>}\374\230\275\020\266\320=\302\235\213\275\341Bx=8n!\276\317\263u<\204R\206>A\257\331=\006\226\000\276\206E\r>f\240.\276ga\333=w\333\346\275\2452\014>\204:w\276t%\026\275\3338\252<\305[\315<\231\2720\275\033V\222=a\206\"\276\277\350\225\275G\2428=\375\216<>r\272\225\2754\353\253\275\004\233\204\276\3416\337=>\222\225=\336\317\234>\343#\244\275Q\215Y\276\241N\202>\252\322\223\276\201-\316\275\311\326\377\275\352-|\275\241\250.\276\0314\304\275iN\010=\372\207\024>u\257v<\005d\306\275\240\\\317\275u\235i>\216\220\315\275\277=\316=\314\003\037=\303\361\215>/\211\202\275@7\207\276\252?\302<N\203J=msM>\312\251G\275\2765\030>\362)\355\2753\213\221\274\235U\210\274\236c\361\274H\266\270=\236%&=\203\212\340<T]%\2754\005\213\2754\230\314<.+\244\275\260n\264;\237\016*>C}I>fgN=>\345\027>\350\002\014>\022\207X\275\304\027E>\274\023\024>/=C=\031\033\346\274:|\001\276\301\353\221\2756V\344<\231\375\037\276\265\250\213=\345\215;=#\342\233\276\177\250\235>\364\031\256\273\264\017\265\276\362\200\253\274\365j=\274\315}\265=?x\301\2751\373\220=\251:\305\275\242cj\276?r\213\276\214Dn\275\001\264\241\275\032\356?<\322 \233=g:\201<X\"\265=\300rh=\366\302\247=\263+\245=U\355p>\274\256@\276\224\357\n=\224\265\007=\0304\r>Xo\307<\254Z@\276\235\274B>\"8B\274![\276\275\235\356\345\274\n\3452\276\340\036\203=\237\363\373<l\265\260>\361\223\341\274$\337\325=c\231p>\373\326\233=P\347X=\020=\014\276\274?\345<\212Fr\275sW\343<ZJ\330=2lz\275[\251\374\275\374\023h\275\305\204\037=\n\274\341\2750d\215=\206\376\237\275h\314\334\275\304\373\025\276\037\2369\276\335\325\212\275\200\214H=\024\220@\276xA\t<\362(\027\276\rc\026;\371;\023>\254\030\014>\301W\256=\330\343C>\270\2529=\373w\225\276r\377\345;\314\334c=j \005>1\366\'\274\0163\250\273b!5\272\367\273\225\275<\352\322\274\"\331\200=\304\240+=\023\r,\276,r\014>of\227\275w\256S\274m\325\257=\256\235\'\275\277\305\177>\266\013\005\274\361\007\247=\202\362h\276\362\353\314\274\232\261\215\275\214h&:b\"\257\275)\026\376\275\325\343<>\033ll=SPE\275\235\212\017\2764I}>\000Y\266\275\353\332V>\367\362\235=\241\356s;\036\222\304=\306\3663\276\301\\\224=*<\206\276\217L\021>\003\210\035<\342\022J\276)\224\034>H0\245\274_\335\316\275N\337\350=9\307\t?\277\234t\275\204p\007\275\347S\320<\356\214\331<\333\303\037>\211\243\223>\354\000\311\275Za\347\275\3638\222>i\002P=m?\030\275\2538\013>\341\307)\275f\325\334\273E\217\220=\034\225!\275-\007%>\226\306\033\276\020\037\206\276\362\212v\275r\305\326\2757$\255=fA\032=\rh\013>\373~\035>\204\000\211>\215$\271=tW\330=\035K\006>\256Y\000=\245\2543\276<@\365=E\010\364\275\243\312->\234-\376=*\222=\276b\371\335=\336N\276</\377\\=\264\"u\276\212T\224=CN\315=\340\254G>\235B\022>s\304\202>\371\224c\276\240\340T>\177\315\034<\370q\264\275\226\322\201\275p\326m=6\341\224>\\?\247\275\010z\243<\356\200\242=\321d\014=\333\217\034=Z9\250\275r\206\217=^uQ>H\277\273=\241\342*\276\231\241\270\275\3339\214=\352f\'>\036\312h=$Gx=\226\225\027\274\237\013-\275\353\3057>V\207<=\275\263\224\276I\342\266\273\200`\315\275\270\345\327<ER\255\275\376\315\004\276E\"\016\275\376\267,>\304\235 \275h\231|\276\230J@\274u\277\335=\217\'\345\274\201|\251>\250~\206\275\270\241F\275~\300\211>yt\377\275\247\002\366\275\300\213\340=\014\340->\332|><\355>=>\320\334\240\276\016\211\201\274CA\023>]6\374=\300\242\375\275<\315\025\276[J#=\001\346!>\313\370m=\302\037\271=\305\351\324=\334\321K>\277\213U\276\341\212\275\275\310\205h=C\"\231\275Oh\223\274\033\014\027>%\262\006\276W\253\'=h\273\255\27519<>u\357{>>j\254<i\221\352<v\025\203=^\215\005>\251U\035\275\367\236\006\276\032\031\007>l`]\2765\177!\275p!\317>Aa\371<w\201\376\275\302\332%\275\225\254\316=\331sP\275f\344\231> S$\275\354\235\032:>\030\">\024\2438=\351+S=\024\242\"<\332\303\263\275\t\034\177\275s\220\222\274\216\020\310\273\031_,=\252\327K\276jV:>\262\313\321=\030A\227=\321\027;\273y!\001>\010`\274\2742%>=\332\231N\276\212\205\212\275\000\366\024>\022i;\276\tG\017\276\232\216\215=\355\204\307\275q\247\206\2753[\362\275&\247\017\276\341:\237\276\345\374|>\343\212`=m.\r>Nz\020=p\265\235=\32350\276\031\322\325\275%\2727=\017\357 >;a\302\275\246\305\266\275\225\017\335=\363\007\217<\214\227\016=\366\024\003\276l\350\277\275\326\202\264\275p\0361=\217\271\'>\017z\247:\245\353\002\276N\324e\276p\020D\276P\211`\275\356\214\255\274\371T\320<\210x\"=\267\006\225\274\240\2016\276\340\242/\276\305i\274\275\361X\261=Uv@\275\352&\021\275\000G?;\236\356\254<!g\332\274\306\361}\275\010%\204>\0051A=\230\257\273=\324\354u\276\207\313\346=\336\366>=\233\326|=\245\206\237>\322\020\267=^]\322=\245\247j>@\200\351:<p\004>\246;\276\275;\342\205\276\263\"\225>`~&=\237\021\037\275\222a_=\367?5\275\3515\004>k\200\342\275\335>\305=0\265\025\276<\371(\276v\032\013>\234\304@\276O\363#>]`\223=\275Q,><\001\3709\231\233n\276\010\277\344=\361\257\341<j\225\235<\237\204\033=\246\026\206>3\260@=H\375\033\276H#\263=\325r~\275\205D\225\275\tsE\276u\232\204\275\014\277\267>;V@\276\nQ>\276r\003\213<\267\006\221\274\033\323\377\275lf\236\275`1p>y\250\030\276\243v >\216\034>\274Bi\353\274y\263l>\260\322\017>\226d\006>\212i\022\276\311#\036>\216\256\t\274\206\341>\273\273\006\217\275\345\373M\274\233\203\245=\364?\034=W\022Q\276x\321\235=#>\216\275qq\237\275z\343G\274M\026\r\276\316]=>MY\200<+\366@>\255\331\201;\371\307\310<\342\367g\275A\213\310\275\006\003\245\275\376fY\275* \030>\365\321\007>$\225\371\275\334\304\323;#\244z\2753\377\266\274\"T\335=\237\302\226\276\337r\225\2763\306\350\275\342\256\\=\254\260\207\274\335\217:\274\031\373\214</\222\203=\335\302\360=&`\'\275\360<a=9E\335=6\006\242\276\303\216=>;S\344=\235\316\255=\274\017\332=/\374\274>\n1o<\373\'\037>1;\303=X\027!\276)\341%\276!\037\354=X\002X=\025\361\224=9!\350<\336\367\306=\374\231\r\276\371\300\034>t\361\352\274q`V<\014\016\020\274\003P\">\343\032\t;\265\237\315\275VW\253\274\230\314\003>\016\306\024\275\322\321\016\276\334CH<\210Y\030\276\235\336\020\275\254\336\332\275X\225L>\356\212\'>\342\272X>\243\326\273<\033\3713>\023\014\r\276\232#\343\275\000\024k\275\3119\214>\210[\212=\235\003\274\276jG/>n\206D=\305\335\206=\016\024\253;)8M\275o\363\201=\363r\222\275Zz)>\340-\311\275\242E\316\275\253(\203\275\244\224j\276*\212\221=\246_i\275\241\2136\276\345u\016>\t%x\275"
      }
    }
  }
}
node {
  name: "sequential/net/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sequential/net/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequential/net/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequential/net/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sequential/net/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequential/net/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequential/net/zeros/packed/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "sequential/net/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
      }
    }
  }
}
node {
  name: "sequential/net/gru_cell/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 60
          }
        }
        tensor_content: "\247{n<\035\032\346\275\343V\227=\272{]\276\200\334\375\275~\\\177\276\3520K<\213\341\276\275A\027\232\276\257]\223\276\006\234>\276\236##\276\352x\n>u\\\275\275T\031w\275\234\271\360=\376\230~\276\252H\250\276\250\203\024\275\364-]=\346[T\276\350b\362=\\}\025>|\035\210\276,\244$>F*U>\206\216E\2763\3510>8S\016=\360\256)<\r\252A\276\251\300\024\276\367\244\347<}\306\231=\"\t^>\344\263u>\264\376^\275\207\037\236\2766\252\003\276\302\005\035>=\217l\2766\340\225\276\326\022\253=\360\201<\276l\253\213\275W\031->\210\003\231\274\325\317\213\276\260\365g\276\346\233\334=\377\330a>\357I\204\276\274\2708\276\230\033\000=\213\336\241\275\3769;\275.w!\276\360U\221\276\367\315\021>Bi9\276?\311\217>\300\351\301=P\243\207\276~\030\200\276\357:C\2768\263\030\276(\'\212\276\331\222%\275x\314h>\261\242\035\276\026\211\235=\331\322\035>I\374\345=\352\355_=\304\344\241\276~\002\312\274A\215\350\275\376P\'>n\211J>\244\024\177=\032=\004>:\007n>\226\355\203>v\205\020>Q8\006>\336\225\030>\303<\033\276&T8\276\331\034\">tdI>`L\203>\266X,>`d\203\276b$\025>\264(\223>Z\255*\276\361)\240<\300\231\237;6\305\214\275S\261/>R\3744\274\376:T\276\263s8=\322\363\366=\352lS\276\255\2540>\265`Y\276\370o+\276\250vM>\221\256\366\275\257\001&>)\024\261\275}\024\362<\214\327.\276\201b\366<\320\253\211>\230\305T\276\323\027\370=I\362l=K\203\237\275\024z\227=K\242\007\276\223Ef>\213\315\334\275h\000n\276\244\r\243\275\203\242~\276g\ng\276;\370\234\275\256\336\004\276|\256I\276F6~\275\004\261\321=\306\036\014<\324\246S\275x-\220\275\330\020\200\274@|\352=\372W\212>d\311\217>\260Cx>\250\207\222\275\251\301;\276\020x~>\334H:=\352\340\307\274D\236\337=\370zx>\256\220\231=\363\246b\276\333b\237<\177\365\312=\313\210o\275n\274\010\276AsV\276)\277[\276Q\311\370\273r\003C\276uti>\n\234\344<M\342!>\237yd\276\274\336\256\275\nW\221>`\010\206>v\206\211\276d\227K\275v\t\314\275\037\354\324=\021.P>\254\206:\275\"g\007>\343\010\026\275\324.\214\274\264PS\2765\264\204\275\206\326j\274\243g\211\276v,\240\275\277\024g>\342\333l>\021_\213;eq$\274i\253\202\276\034\374\222\275\004\3748<8d\254<\221\305\003\276\257\352D\275+\243O\275\320\303b>\305e2\2758\275\361\275+\007T>\365s!\276\004\370\204>V\252\r>{(\342=n\3116\276N\025N>\314\375\351\275\354\253b=\367\266E\276T\2506\276c\2143\276\030_\215\276e\"\022\2768y\366\275\235\206\025\276C\361H\276`D(>\007\212\212>\217\331\362\273\347.h=\"\202\304\274\372)x\276SO\223>\237\306\370=\231g\275\275\013\027j\276\323\274\206>^\355\325=e\231\364=\332\224&\276!\022\253\275\265\307\226>\t\212$\275E3p>\306\031\366\275(P8=@\357v>\263\337\246\276\202{0\276 i\224\276\317\232\347\275\334\263*\276\002E\264\275\306;\036>\274\321j\276\267U\237>\201\031h\276\177\0178\276\023\365\363\2759o8\275\023\251\241<\305\016\017=\355\321\004>*\267\025\276,\357Y>\037\022J\2760\375\217\276\'\330\265\275z\3721>\327`+=\363\007\210\274\305\017\034>;\362F>\260\005E>\374D-\276\213\035\222>\020\211\005;\320Rx>\346\022s\276\252~\333=\263Tq=\357/\301\274j\300\344=\252\366[=\354\377N\276\032c\'\2766\\\276\275\325\231\324=\354D_\276\260\352\244=(\006\316=y\242 =-\201\206>\200\0364\276\215\313\201\276\205\376t\276\236\322\225>\237j\001\276\246\013\002\276n.\204=\347\322\220\275V\\\253<z\340\030>\205\241\200\276D\343\013\276\360\010?\276\332Z8>\366\242\023\276\361\207\225=m\026t\276\342\372~\276\017\2562\275,\240\231\274\017\336V\276$\343\024\276\372T*\276Y)\036\276\3615\374=\203\357z>|\277^>\237\233D>E<\211\276\335i\271\275eS\353\2750\002\237=+FR\276\260PY>\331\317<>\342*\r>\365\360z>Y8\t\276\337\205F\276 #\216>M\206\007\276>\361|\276?\305\206\276\331b\353=,\333\355=\233\253\242\276\205\023\220>\242\305\026>u\224S=\246\005\253>\317\2016\276\307g)\276\327d\275\275\014S\224>w\204\326\275Y\2344\276C\037g\276F\202\220\276\306\335\321\275\013t{\275\207o\334\274\326\177d\276\307I\304=\242\320\341=\356\3137=\335\2728>2C\321\273}\336\221\276\3107?\273\311\250q>\'\202^>YV\231\276}\335\246\276\001\376\030\274\027y\236\275\256\016\036\276pi1\276=\213\322\275\207_f>\001p\264\276\310\004^>\007\253^>rJ\227=M\\s\276(\317c=\373\031P>@A\207\275\314\337\302\275\235\302\034\276\003\302r\275\274J\205>\223\201a>\376a\210>\206\300Z=a\216B\276\227\312\277\274\255{\326\275M\006f>\240\016\'\276W\202s<N3\262=\371RU>T\304\034\276\264\236B>\010\211l\274\346\020O>\177\257\326\275\273\376^>\273\027\">\234\261\211\272m\344~\275TF+\276\350p\035>\360_\036>d\304z\275\013E\010>Q\266}>\340\321\227<!X\007\276\317\227\032>\257\256\206<x\305d\276\261\t{\275\030wZ\276.u\004\272\362\250\230\275{e\007>\336U1\276mE\212>P\373P>\334\331l>/m\205\275ugx\276\371\204,\276p\205H\2742\234->\020YC> \034y\276+3.\276?g\340=\324\377\214\276\324\n\356=\305Z\363=MW\215\276\017Uc\2755\n\373=\010\345\017>\356\"\230>R\215|>\235\rV\276\200V\\>\2409.>3\223\317={\333\005\276\327\307+>x\321\277\275\240\366O>l\337\204<\236uZ>\323,\326=\347\253\360=\225$B\276\221\217(>\3230\362\275\"w&\276\363\014x\276\240V@\275\024\311[>\364\350\026>\241~U\276m+a\276AR\201\276\226a\016\276\343\013\037>\010T\210\2769\'\261\274\302\304L=\270 a<\264g\332\275\333z\275<\373\001U>u\310u>\200\322s\276~\027\357\275m(\204\276k\203\250\275\033\355.\276\224b\226=yRT=\303\3347\276Z\250X\276\237v\002\276\250\300<\276\334\217$\276\245\263j\274\223\265\013>\263\314\211>\005M\311=\217w\r>\214\356\214>\276\032)>N\227&\275M?\236\275\260\306\217>\372HX>\177G:>\325\336\205>T>P\276 \237\2167\'\354\233\275-$\224\276\007\177C=\256pb>\0339\206>Z\347\306<*\210|\276QO\240\273\332\324\220\274\031\233\204\276\2308q>\014\n*\275\342\374y\276*\341$\275:{\231\276\206\235\220\276\243?9=\204\\\212\276\313\222\214\275X\n:>\226\2456=\247\260\301\275\356S\212\275n!y>JGq\273K\242P>\275\032\354\273\305f6>h\327\004>\311\210\234\274n{\221\275*(\022\275\245)\024>fke=\301\270\024>+\031\315\275p\r[>^G\030\276\355qx>Fe\206\276\363\276\014>@B\341;\341\320\307\275\335\252_\276g\357\203><\313\013\275&~4=\006\253a\275\263J\265=\277@\276\275\271\001\037>\257g\031>\211\221\250\276*\211\023>`\262R\276\030go\276\010\364\270\275a\234\232\276A\003}>\234\341u\275\310}d>\353;\034=\37590\276\374!F\276\346\326\222\276\300\223\027\276\240\253n>\222Y\211>\351W\222>G\0367>\357\373}>\365Qk=:\206\260<M\2309\274p\306\017\276\231\035\202\276\016e\273<\267\360z=<\3109\275\032\316i\2762\037\231<mu/\2763\317\277<0\353\212\276\372k\021\276\214\351\273=\263\272(>\344cs=\254\247\232\275\2574#>\265*\033\275=\216\333\275{;\212\276\311\314<>^Uq>\254B<=5\361\203=\323\3531\276\274p*\276\026\261q\274\244\241\262>\316\374\216=\000\3065>L1\250\276R\234!>\306\005\302\275\236s\220\275\254o#>$\t\005>\212\316\260=\274\205Y\276\346/\303=\326\3308>\311\ts\2761/\216>Q\224s<Jh\206>\024\376\267<n\247\005\276\260b\203\275\237\237\233>\244\242$\276jSu\276pPM\276\027T\212>\037\361\307:5<\315=\342|\335\275\366F\202>G\2215\275y\003n\275\363\003\252=\265\263\201\275\275\242\224\275\237\003B\276*\355)\276U\277\207:Ji7=\266\321?\275\347\001\202\276\030\337q\275\210\241\020=\033\2124>\221\274\211=OQA\276\320\331\240\276m5\230\275\025Po>z\010\023\276\024\224\211\276/.=\275\351\373\313=\010\240\225\275i\353\001\276q\305r>%\377\345\274\251@\213\276\370*&\276\277o\207>c\374y\275\016\264\243>\321\351)\276\367\273\377\275r\364\001>\025O\330\275\316\223X\275\275\030,>\017\364\036\276^Y\303\275X\310\030\276\230\274\267<\005\360<>%\'g\276Ofy>\324\235\221\276:\242u=\313\246X\275K=3>\022\334\313\275H\225\210\273!V\255=n\035{\276P6\276\275\014f&\276\306\252\017\276\272\221\032>\023\334\213\276\367:\025>\001\325 \276\274O4\276\021[\211>\n\377p=\334\\(\276\035\351\033\275\327\021\201>?{\250\276\255]\211\276\377!d>(\344>\276\326\207\227=S\221\344\275\000l\334\275\026Z_>\027\216#\276u\005f\276\241d\201=\313\r\317\275\244{\202>@\"V=\001W\323\275\202\3274\276b\255\206>#`U\275\373\362`>\257\264\010\276\342\332\216\276\037\366u=\360Y\221>\320\303\323\275\254\367\006\276\310\301\216\275\300\010\205\276i\247\241\276 5\266\275\300\225\246<\240]\203\275\334\211\332\275S]\211>\257\327\331=\327\221\006>\224\000F>\000\351\205\2764`E\276\001b\342=.\3452\276\0141\272\275\21200>\303p\270=\374\372\351\275 h\225\276\275\215}>\201\362s>\300\2149\276\371y\212>\257P4>\333\237d>\030\376H>\272A\035>M\266\245\275o\230\220\275\215^9>K\357\266=\216\336\212\275\367\255m>\351f\216\276\225CS\274ExB\276=Dw\276\311IQ\276\375\"\214\276\036F\205>\321$\356=\304\355_>z\271\231>cM\226\276C\027U\276Z\241\022>\360\321\232\2755v\246>y\234r=\375\346\267=\274d:\276(\247x\276\236=\203\276A\371\024\276\2636C\276\270`\231\2751K\177\276\345rO>\006\rX>,N\211=:a.=*u%>\311\207\207>\305X\037>E(F\276>\332=>\345\336a\276\262+\266=x(<>\227X`>XH\337<\323\203\200\276W\212\270="
      }
    }
  }
}
node {
  name: "sequential/net/TensorArrayV2Stack/TensorListStack/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "sequential/net/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequential/net/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sequential/net/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequential/dense/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\240\014\251>tE\334\276Lp\003\2778\026\246=\353U\247\2769\273 \276\255k\023\276R\261\265\275\320\277\301\276\220\007\022\277Rl\000\277\327 \301\275\276z\213>H&\035>Ia\274=\245\267\t<\205\317\032\275S\221\241\276\254\234\017>\025\023\242>"
      }
    }
  }
}
node {
  name: "sequential/dense/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.02297714538872242
      }
    }
  }
}
node {
  name: "sequential/net/while/LoopControlInputs/_12"
  op: "NoOp"
  input: "^sequential/net/TensorArrayUnstack/TensorListFromTensor"
  input: "^sequential/net/TensorArrayV2_1"
  input: "^sequential/net/strided_slice_1"
  input: "^sequential/net/time"
  input: "^sequential/net/while/loop_counter"
  input: "^sequential/net/while/maximum_iterations"
  input: "^sequential/net/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/while/enter/_2"
  op: "Enter"
  input: "sequential/net/while/loop_counter"
  input: "^sequential/net/while/LoopControlInputs/_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sequential/net/while"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "unused_control_flow_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "unused_control_flow_input_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "sequential/net/while/sequential/net/time_switch/_23"
  op: "Switch"
  input: "sequential/net/while/merge/_15"
  input: "sequential/net/while/LoopCond/_20"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/while/enter/_9"
  op: "Enter"
  input: "sequential/net/gru_cell/ReadVariableOp/resource"
  input: "^sequential/net/while/LoopControlInputs/_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sequential/net/while"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "unused_control_flow_input_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "unused_control_flow_input_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "sequential/net/while/sequential/net/TensorArrayV2_1_switch/_24"
  op: "Switch"
  input: "sequential/net/while/merge/_16"
  input: "sequential/net/while/LoopCond/_20"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "unused_control_flow_input_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "unused_control_flow_input_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "sequential/net/while/sequential/net/while/loop_counter_switch/_21"
  op: "Switch"
  input: "sequential/net/while/merge/_13"
  input: "sequential/net/while/LoopCond/_20"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/while/loop_body_control/_28"
  op: "Identity"
  input: "sequential/net/while/sequential/net/while/loop_counter_switch/_21:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/input_control_node/_56"
  op: "NoOp"
  input: "^sequential/net/while/enter/_10"
  input: "^sequential/net/while/enter/_11"
  input: "^sequential/net/while/enter/_9"
  input: "^sequential/net/while/loop_body_control/_28"
  input: "^sequential/net/while/sequential/net/TensorArrayUnstack/TensorListFromTensor_switch/_27"
  input: "^sequential/net/while/sequential/net/TensorArrayV2_1_switch/_24"
  input: "^sequential/net/while/sequential/net/strided_slice_1_switch/_26"
  input: "^sequential/net/while/sequential/net/time_switch/_23"
  input: "^sequential/net/while/sequential/net/while/loop_counter_switch/_21"
  input: "^sequential/net/while/sequential/net/while/maximum_iterations_switch/_22"
  input: "^sequential/net/while/sequential/net/zeros_switch/_25"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/input/_57"
  op: "Identity"
  input: "sequential/net/while/sequential/net/while/loop_counter_switch/_21:1"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/add_1/y"
  op: "Const"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/add_1"
  op: "AddV2"
  input: "Func/sequential/net/while/body/_1/input/_57"
  input: "sequential/net/while/body/_1/sequential/net/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/Identity"
  op: "Identity"
  input: "sequential/net/while/body/_1/sequential/net/while/add_1"
  input: "^sequential/net/while/body/_1/sequential/net/while/NoOp"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/output/_67"
  op: "Identity"
  input: "sequential/net/while/body/_1/sequential/net/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "unused_control_flow_input_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 13
        }
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/input/_65"
  op: "Identity"
  input: "sequential/net/while/enter/_10"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/MatMul/ReadVariableOp"
  op: "Identity"
  input: "Func/sequential/net/while/body/_1/input/_65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "unused_control_flow_input_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/input/_66"
  op: "Identity"
  input: "sequential/net/while/enter/_11"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/MatMul_1/ReadVariableOp"
  op: "Identity"
  input: "Func/sequential/net/while/body/_1/input/_66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/input/_64"
  op: "Identity"
  input: "sequential/net/while/enter/_9"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/ReadVariableOp"
  op: "Identity"
  input: "Func/sequential/net/while/body/_1/input/_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/output_control_node/_77"
  op: "NoOp"
  input: "^sequential/net/while/body/_1/sequential/net/while/gru_cell/MatMul/ReadVariableOp"
  input: "^sequential/net/while/body/_1/sequential/net/while/gru_cell/MatMul_1/ReadVariableOp"
  input: "^sequential/net/while/body/_1/sequential/net/while/gru_cell/ReadVariableOp"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/while/next_iteration/_37"
  op: "NextIteration"
  input: "Func/sequential/net/while/body/_1/output/_67"
  input: "^Func/sequential/net/while/body/_1/output_control_node/_77"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/merge/_13"
  op: "Merge"
  input: "sequential/net/while/enter/_2"
  input: "sequential/net/while/next_iteration/_37"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/NoOp"
  op: "NoOp"
  input: "^sequential/net/while/body/_1/sequential/net/while/gru_cell/MatMul/ReadVariableOp"
  input: "^sequential/net/while/body/_1/sequential/net/while/gru_cell/MatMul_1/ReadVariableOp"
  input: "^sequential/net/while/body/_1/sequential/net/while/gru_cell/ReadVariableOp"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/while/enter/_4"
  op: "Enter"
  input: "sequential/net/time"
  input: "^sequential/net/while/LoopControlInputs/_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sequential/net/while"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/add/y"
  op: "Const"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "unused_control_flow_input_8"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/add"
  op: "AddV2"
  input: "Func/sequential/net/while/body/_1/input/_59"
  input: "sequential/net/while/body/_1/sequential/net/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/Identity_2"
  op: "Identity"
  input: "sequential/net/while/body/_1/sequential/net/while/add"
  input: "^sequential/net/while/body/_1/sequential/net/while/NoOp"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/output/_69"
  op: "Identity"
  input: "sequential/net/while/body/_1/sequential/net/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/next_iteration/_39"
  op: "NextIteration"
  input: "Func/sequential/net/while/body/_1/output/_69"
  input: "^Func/sequential/net/while/body/_1/output_control_node/_77"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/merge/_15"
  op: "Merge"
  input: "sequential/net/while/enter/_4"
  input: "sequential/net/while/next_iteration/_39"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/while/enter/_10"
  op: "Enter"
  input: "sequential/net/gru_cell/MatMul/ReadVariableOp/resource"
  input: "^sequential/net/while/LoopControlInputs/_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sequential/net/while"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "sequential/net/TensorArrayV2_1"
  op: "TensorListReserve"
  input: "sequential/net/TensorArrayV2_1/element_shape"
  input: "sequential/net/TensorArrayV2_1/num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_ARRAY
      args {
        type_id: TFT_TENSOR
        args {
          type_id: TFT_FLOAT
        }
      }
    }
  }
}
node {
  name: "sequential/net/while/enter/_11"
  op: "Enter"
  input: "sequential/net/gru_cell/MatMul_1/ReadVariableOp/resource"
  input: "^sequential/net/while/LoopControlInputs/_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sequential/net/while"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "sequential/net/while/enter/_5"
  op: "Enter"
  input: "sequential/net/TensorArrayV2_1"
  input: "^sequential/net/while/LoopControlInputs/_12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sequential/net/while"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/input/_60"
  op: "Identity"
  input: "sequential/net/while/sequential/net/TensorArrayV2_1_switch/_24:1"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/TensorArrayV2Write/TensorListSetItem/index"
  op: "Const"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
      }
    }
  }
}
node {
  name: "unused_control_flow_input_9"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/TensorArrayV2Write/TensorListSetItem"
  op: "TensorListSetItem"
  input: "Func/sequential/net/while/body/_1/input/_60"
  input: "sequential/net/while/body/_1/sequential/net/while/TensorArrayV2Write/TensorListSetItem/index"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/add_3"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "resize_if_index_out_of_bounds"
    value {
      b: false
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_ARRAY
      args {
        type_id: TFT_TENSOR
        args {
          type_id: TFT_FLOAT
        }
      }
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/Identity_3"
  op: "Identity"
  input: "sequential/net/while/body/_1/sequential/net/while/TensorArrayV2Write/TensorListSetItem"
  input: "^sequential/net/while/body/_1/sequential/net/while/NoOp"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/output/_70"
  op: "Identity"
  input: "sequential/net/while/body/_1/sequential/net/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "sequential/net/while/next_iteration/_40"
  op: "NextIteration"
  input: "Func/sequential/net/while/body/_1/output/_70"
  input: "^Func/sequential/net/while/body/_1/output_control_node/_77"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "sequential/net/while/merge/_16"
  op: "Merge"
  input: "sequential/net/while/enter/_5"
  input: "sequential/net/while/next_iteration/_40"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/while/enter/_3"
  op: "Enter"
  input: "sequential/net/while/maximum_iterations"
  input: "^sequential/net/while/LoopControlInputs/_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sequential/net/while"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "unused_control_flow_input_10"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/input/_58"
  op: "Identity"
  input: "sequential/net/while/sequential/net/while/maximum_iterations_switch/_22:1"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/Identity_1"
  op: "Identity"
  input: "Func/sequential/net/while/body/_1/input/_58"
  input: "^sequential/net/while/body/_1/sequential/net/while/NoOp"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/output/_68"
  op: "Identity"
  input: "sequential/net/while/body/_1/sequential/net/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/next_iteration/_38"
  op: "NextIteration"
  input: "Func/sequential/net/while/body/_1/output/_68"
  input: "^Func/sequential/net/while/body/_1/output_control_node/_77"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/merge/_14"
  op: "Merge"
  input: "sequential/net/while/enter/_3"
  input: "sequential/net/while/next_iteration/_38"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "Func/sequential/net/while/cond/_0/input_control_node/_44"
  op: "NoOp"
  input: "^sequential/net/while/enter/_10"
  input: "^sequential/net/while/enter/_11"
  input: "^sequential/net/while/enter/_9"
  input: "^sequential/net/while/merge/_13"
  input: "^sequential/net/while/merge/_14"
  input: "^sequential/net/while/merge/_15"
  input: "^sequential/net/while/merge/_16"
  input: "^sequential/net/while/merge/_17"
  input: "^sequential/net/while/merge/_18"
  input: "^sequential/net/while/merge/_19"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "Func/sequential/net/while/cond/_0/input/_47"
  op: "Identity"
  input: "sequential/net/while/merge/_15"
  input: "^Func/sequential/net/while/cond/_0/input_control_node/_44"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "unused_control_flow_input_11"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "Func/sequential/net/while/cond/_0/input/_50"
  op: "Identity"
  input: "sequential/net/while/merge/_18"
  input: "^Func/sequential/net/while/cond/_0/input_control_node/_44"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/cond/_0/sequential/net/while/Less"
  op: "Less"
  input: "Func/sequential/net/while/cond/_0/input/_47"
  input: "Func/sequential/net/while/cond/_0/input/_50"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/cond/_0/sequential/net/while/Identity"
  op: "Identity"
  input: "sequential/net/while/cond/_0/sequential/net/while/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Func/sequential/net/while/cond/_0/output/_55"
  op: "Identity"
  input: "sequential/net/while/cond/_0/sequential/net/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "sequential/net/while/LoopCond/_20"
  op: "LoopCond"
  input: "Func/sequential/net/while/cond/_0/output/_55"
}
node {
  name: "sequential/net/transpose"
  op: "Transpose"
  input: "x"
  input: "sequential/net/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/TensorArrayUnstack/TensorListFromTensor"
  op: "TensorListFromTensor"
  input: "sequential/net/transpose"
  input: "sequential/net/TensorArrayUnstack/TensorListFromTensor/element_shape"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_ARRAY
      args {
        type_id: TFT_TENSOR
        args {
          type_id: TFT_FLOAT
        }
      }
    }
  }
}
node {
  name: "sequential/net/while/enter/_8"
  op: "Enter"
  input: "sequential/net/TensorArrayUnstack/TensorListFromTensor"
  input: "^sequential/net/while/LoopControlInputs/_12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sequential/net/while"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "unused_control_flow_input_12"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/input/_63"
  op: "Identity"
  input: "sequential/net/while/sequential/net/TensorArrayUnstack/TensorListFromTensor_switch/_27:1"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/output/_73"
  op: "Identity"
  input: "Func/sequential/net/while/body/_1/input/_63"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "sequential/net/while/next_iteration/_43"
  op: "NextIteration"
  input: "Func/sequential/net/while/body/_1/output/_73"
  input: "^Func/sequential/net/while/body/_1/output_control_node/_77"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "sequential/net/while/merge/_19"
  op: "Merge"
  input: "sequential/net/while/enter/_8"
  input: "sequential/net/while/next_iteration/_43"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "sequential/net/Shape_1"
  op: "Shape"
  input: "sequential/net/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "sequential/net/strided_slice_1"
  op: "StridedSlice"
  input: "sequential/net/Shape_1"
  input: "sequential/net/strided_slice_1/stack"
  input: "sequential/net/strided_slice_1/stack_1"
  input: "sequential/net/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/input/_59"
  op: "Identity"
  input: "sequential/net/while/sequential/net/time_switch/_23:1"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/enter/_7"
  op: "Enter"
  input: "sequential/net/strided_slice_1"
  input: "^sequential/net/while/LoopControlInputs/_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sequential/net/while"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "unused_control_flow_input_13"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/input/_62"
  op: "Identity"
  input: "sequential/net/while/sequential/net/strided_slice_1_switch/_26:1"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/output/_72"
  op: "Identity"
  input: "Func/sequential/net/while/body/_1/input/_62"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/next_iteration/_42"
  op: "NextIteration"
  input: "Func/sequential/net/while/body/_1/output/_72"
  input: "^Func/sequential/net/while/body/_1/output_control_node/_77"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/merge/_18"
  op: "Merge"
  input: "sequential/net/while/enter/_7"
  input: "sequential/net/while/next_iteration/_42"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/Shape"
  op: "Shape"
  input: "x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "sequential/net/strided_slice"
  op: "StridedSlice"
  input: "sequential/net/Shape"
  input: "sequential/net/strided_slice/stack"
  input: "sequential/net/strided_slice/stack_1"
  input: "sequential/net/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "sequential/net/zeros/packed"
  op: "Pack"
  input: "sequential/net/strided_slice"
  input: "sequential/net/zeros/packed/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "sequential/net/zeros"
  op: "Fill"
  input: "sequential/net/zeros/packed"
  input: "sequential/net/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/sequential/net/TensorArrayUnstack/TensorListFromTensor_switch/_27"
  op: "Switch"
  input: "sequential/net/while/merge/_19"
  input: "sequential/net/while/LoopCond/_20"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "sequential/net/while/sequential/net/strided_slice_1_switch/_26"
  op: "Switch"
  input: "sequential/net/while/merge/_18"
  input: "sequential/net/while/LoopCond/_20"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/split/split_dim"
  op: "Const"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/TensorArrayV2Read/TensorListGetItem/element_shape"
  op: "Const"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\r\000\000\000"
      }
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/TensorArrayV2Read/TensorListGetItem"
  op: "TensorListGetItem"
  input: "Func/sequential/net/while/body/_1/input/_63"
  input: "Func/sequential/net/while/body/_1/input/_59"
  input: "sequential/net/while/body/_1/sequential/net/while/TensorArrayV2Read/TensorListGetItem/element_shape"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/ones_like/Shape"
  op: "Shape"
  input: "sequential/net/while/body/_1/sequential/net/while/TensorArrayV2Read/TensorListGetItem"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/ones_like/Const"
  op: "Const"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/ones_like"
  op: "Fill"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/ones_like/Shape"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/mul"
  op: "Mul"
  input: "sequential/net/while/body/_1/sequential/net/while/TensorArrayV2Read/TensorListGetItem"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/MatMul"
  op: "MatMul"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/mul"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/unstack"
  op: "Unpack"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 2
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/BiasAdd"
  op: "BiasAdd"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/MatMul"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/split"
  op: "Split"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/split/split_dim"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 3
    }
  }
}
node {
  name: "unused_control_flow_input_14"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/input/_61"
  op: "Identity"
  input: "sequential/net/while/sequential/net/zeros_switch/_25:1"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/MatMul_1"
  op: "MatMul"
  input: "Func/sequential/net/while/body/_1/input/_61"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/MatMul_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/BiasAdd_1"
  op: "BiasAdd"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/MatMul_1"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/Const"
  op: "Const"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\024\000\000\000\024\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/split_1/split_dim"
  op: "Const"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/split_1"
  op: "SplitV"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/BiasAdd_1"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/Const"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/split_1/split_dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "num_split"
    value {
      i: 3
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/add"
  op: "AddV2"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/split"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/split_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/Sigmoid"
  op: "Sigmoid"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/mul_2"
  op: "Mul"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/Sigmoid"
  input: "Func/sequential/net/while/body/_1/input/_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/sub/x"
  op: "Const"
  input: "^Func/sequential/net/while/body/_1/input_control_node/_56"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/sub"
  op: "Sub"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/sub/x"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/add_1"
  op: "AddV2"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/split:1"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/split_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/mul_1"
  op: "Mul"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/Sigmoid_1"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/split_1:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/add_2"
  op: "AddV2"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/split:2"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/mul_3"
  op: "Mul"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/sub"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/gru_cell/add_3"
  op: "AddV2"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/mul_2"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/enter/_6"
  op: "Enter"
  input: "sequential/net/zeros"
  input: "^sequential/net/while/LoopControlInputs/_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sequential/net/while"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "sequential/net/while/body/_1/sequential/net/while/Identity_4"
  op: "Identity"
  input: "sequential/net/while/body/_1/sequential/net/while/gru_cell/add_3"
  input: "^sequential/net/while/body/_1/sequential/net/while/NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Func/sequential/net/while/body/_1/output/_71"
  op: "Identity"
  input: "sequential/net/while/body/_1/sequential/net/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/next_iteration/_41"
  op: "NextIteration"
  input: "Func/sequential/net/while/body/_1/output/_71"
  input: "^Func/sequential/net/while/body/_1/output_control_node/_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/merge/_17"
  op: "Merge"
  input: "sequential/net/while/enter/_6"
  input: "sequential/net/while/next_iteration/_41"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/sequential/net/zeros_switch/_25"
  op: "Switch"
  input: "sequential/net/while/merge/_17"
  input: "sequential/net/while/LoopCond/_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/while/sequential/net/while/maximum_iterations_switch/_22"
  op: "Switch"
  input: "sequential/net/while/merge/_14"
  input: "sequential/net/while/LoopCond/_20"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential/net/while/exit/_32"
  op: "Exit"
  input: "sequential/net/while/sequential/net/TensorArrayV2_1_switch/_24"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/TensorArrayV2Stack/TensorListStack"
  op: "TensorListStack"
  input: "sequential/net/while/exit/_32"
  input: "sequential/net/TensorArrayV2Stack/TensorListStack/element_shape"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_elements"
    value {
      i: 1
    }
  }
}
node {
  name: "sequential/net/strided_slice_3"
  op: "StridedSlice"
  input: "sequential/net/TensorArrayV2Stack/TensorListStack"
  input: "sequential/net/strided_slice_3/stack"
  input: "sequential/net/strided_slice_3/stack_1"
  input: "sequential/net/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "sequential/dense/MatMul/ReadVariableOp"
  op: "Identity"
  input: "sequential/dense/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/dense/MatMul"
  op: "MatMul"
  input: "sequential/net/strided_slice_3"
  input: "sequential/dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sequential/dense/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "sequential/dense/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/dense/BiasAdd"
  op: "BiasAdd"
  input: "sequential/dense/MatMul"
  input: "sequential/dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "sequential/dense/Sigmoid"
  op: "Sigmoid"
  input: "sequential/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/net/gru_cell/MatMul/ReadVariableOp"
  op: "Identity"
  input: "sequential/net/gru_cell/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/gru_cell/MatMul_1/ReadVariableOp"
  op: "Identity"
  input: "sequential/net/gru_cell/MatMul_1/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/gru_cell/ReadVariableOp"
  op: "Identity"
  input: "sequential/net/gru_cell/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/while/exit/_29"
  op: "Exit"
  input: "sequential/net/while/sequential/net/while/loop_counter_switch/_21"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/while/exit/_30"
  op: "Exit"
  input: "sequential/net/while/sequential/net/while/maximum_iterations_switch/_22"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/while/exit/_31"
  op: "Exit"
  input: "sequential/net/while/sequential/net/time_switch/_23"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/while/exit/_33"
  op: "Exit"
  input: "sequential/net/while/sequential/net/zeros_switch/_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/while/exit/_34"
  op: "Exit"
  input: "sequential/net/while/sequential/net/strided_slice_1_switch/_26"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/while/exit/_35"
  op: "Exit"
  input: "sequential/net/while/sequential/net/TensorArrayUnstack/TensorListFromTensor_switch/_27"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/net/while/LoopExecuted/_36"
  op: "NoOp"
  input: "^sequential/net/while/exit/_29"
  input: "^sequential/net/while/exit/_30"
  input: "^sequential/net/while/exit/_31"
  input: "^sequential/net/while/exit/_32"
  input: "^sequential/net/while/exit/_33"
  input: "^sequential/net/while/exit/_34"
  input: "^sequential/net/while/exit/_35"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^sequential/dense/BiasAdd/ReadVariableOp"
  input: "^sequential/dense/MatMul/ReadVariableOp"
  input: "^sequential/net/gru_cell/MatMul/ReadVariableOp"
  input: "^sequential/net/gru_cell/MatMul_1/ReadVariableOp"
  input: "^sequential/net/gru_cell/ReadVariableOp"
  input: "^sequential/net/while/LoopExecuted/_36"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "sequential/dense/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1482
}
